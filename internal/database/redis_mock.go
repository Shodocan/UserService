// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Shodocan/UserService/internal/database (interfaces: RedisDB)

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisDB is a mock of RedisDB interface.
type MockRedisDB struct {
	ctrl     *gomock.Controller
	recorder *MockRedisDBMockRecorder
}

// MockRedisDBMockRecorder is the mock recorder for MockRedisDB.
type MockRedisDBMockRecorder struct {
	mock *MockRedisDB
}

// NewMockRedisDB creates a new mock instance.
func NewMockRedisDB(ctrl *gomock.Controller) *MockRedisDB {
	mock := &MockRedisDB{ctrl: ctrl}
	mock.recorder = &MockRedisDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisDB) EXPECT() *MockRedisDBMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRedisDB) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisDBMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisDB)(nil).Delete), arg0)
}

// Disconnect mocks base method.
func (m *MockRedisDB) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockRedisDBMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockRedisDB)(nil).Disconnect))
}

// Get mocks base method.
func (m *MockRedisDB) Get(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRedisDBMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisDB)(nil).Get), arg0, arg1)
}

// Ping mocks base method.
func (m *MockRedisDB) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRedisDBMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRedisDB)(nil).Ping))
}

// Set mocks base method.
func (m *MockRedisDB) Set(arg0 string, arg1 interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockRedisDBMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisDB)(nil).Set), arg0, arg1)
}
